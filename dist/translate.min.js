!function(n,e){function a(n,a,t){a.loadLanguage(e.safeLangConfig).then(function(e){n.lang=e}),n.form={},void 0!==e.langObj&&""!==e.langObj||(e.langObj='{"description" : "ENGLISH", "langid" : "en"}'),n.form.selectedLanguage=JSON.parse(e.langObj),a.loadAvailableLanguages().then(function(r){n.Languages=r,n.translate=function(e){return n.lang[e]},n.getString=function(n){return t("translate")(n)},n.changeLanguage=function(){var t=n.form.selectedLanguage.id;e.langObj=JSON.stringify(n.form.selectedLanguage),a.loadLanguage(t).then(function(){location=location.pathname})},n.reloadLanguage=function(a){delete e.safeLang,delete e.safeLangConfig,delete e.langObj,n.form.selectedLanguage.id=a,n.changeLanguage()}})}function t(){function n(n){o=n}function a(n){i=n}function t(n){if(e.safeLang){var a=JSON.parse(e.safeLang);if(void 0!==a)return a[n]||"TAG NOT FOUND";g.loadLanguage(e.safeLangConfig).then(function(e){return e[n]})}}function r(n){return g(n)}function g(n){function a(a){var t=n.defer();void 0===a&&(a=e.safeLangConfig?e.safeLangConfig:i);var r=new XMLHttpRequest;return r.open("GET",o+"/"+a+"/lang.json"),r.onload=function(){if(r.status>=200&&r.status<400)try{var n=JSON.parse(r.responseText);e.safeLang=JSON.stringify(n),e.safeLangConfig=a,t.resolve(n)}catch(n){t.reject(n)}else t.reject(r)},r.send(),t.promise}function t(){var e=n.defer(),a=new XMLHttpRequest;return a.open("GET",o+"/languages.json"),a.onload=function(){if(a.status>=200&&a.status<400)try{var n=JSON.parse(a.responseText);e.resolve(n)}catch(n){e.reject(n)}else e.reject(a)},a.send(),e.promise}function r(n){if(e.safeLang){var a=JSON.parse(e.safeLang);if(void 0!==a)return a[n]||"TAG NOT FOUND";g.loadLanguage(e.safeLangConfig).then(function(e){return e[n]})}}return{loadLanguage:a,loadAvailableLanguages:t,getString:r}}var o="lang",i="en";this.setLangPath=n,this.setDefaultLanguage=a,this.getString=t,this.$get=r,r.$inject=["$q"]}function r(n){return function(a){if(e.safeLang){var t=JSON.parse(e.safeLang);if(void 0!==t)return t[a]||"TAG NOT FOUND";n.loadLanguage(e.safeLangConfig).then(function(n){return n[a]})}}}n.module("safe.translate",[]).run(a).provider("translateService",t).filter("translate",r),a.$inject=["$rootScope","translateService","$filter"],r.$inject=["translateService"]}(window.angular,window.localStorage);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
